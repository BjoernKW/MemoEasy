require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AppointmentsController do

  login_user
  render_views

  before(:each) do
    @customer = FactoryGirl.create(:customer, :company => @company)
    @service = FactoryGirl.create(:service, :company => @company)
    @staff_member = FactoryGirl.create(:staff_member, :company => @company)
    @appointment = FactoryGirl.create(
      :appointment,
      :company => @company,
      :user => @user,
      :customer => @customer,
      :service => @service,
      :staff_member => @staff_member
    )
  end

  # This should return the minimal set of attributes required to create a valid
  # Appointment. As you add validations to Appointment, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    attributes = attributes_for(:appointment)
    attributes[:customer_id] = @customer.id
    attributes[:service_id] = @service.id
    attributes[:staff_member_id] = @staff_member.id

    attributes
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AppointmentsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all appointments as @appointments" do
      get :index, {}
      expect(assigns(:appointments)).to eq([@appointment])
    end
  end

  describe "GET show" do
    it "assigns the requested appointment as @appointment" do
      get :show, {:id => @appointment.to_param}
      expect(assigns(:appointment)).to eq(@appointment)
    end
  end

  describe "GET new" do
    it "assigns a new appointment as @appointment" do
      get :new, {}
      expect(assigns(:appointment)).to be_a_new(Appointment)
    end
  end

  describe "GET edit" do
    it "assigns the requested appointment as @appointment" do
      get :edit, {:id => @appointment.to_param}
      expect(assigns(:appointment)).to eq(@appointment)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Appointment" do
        expect {
          post :create, {:appointment => valid_attributes}
        }.to change(Appointment, :count).by(1)
      end

      it "assigns a newly created appointment as @appointment" do
        post :create, {:appointment => valid_attributes}
        expect(assigns(:appointment)).to be_a(Appointment)
        expect(assigns(:appointment)).to be_persisted
      end

      it "redirects to appointment list" do
        post :create, {:appointment => valid_attributes}
        expect(response).to redirect_to('/')
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved appointment as @appointment" do
        # Trigger the behavior that occurs when invalid params are submitted
        Appointment.any_instance.stub(:save).and_return(false)
        post :create, {:appointment => {  }}
        expect(assigns(:appointment)).to be_a_new(Appointment)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Appointment.any_instance.stub(:save).and_return(false)
        post :create, {:appointment => {  }}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested appointment" do
        # Assuming there are no other appointments in the database, this
        # specifies that the Appointment created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Appointment.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
        put :update, {:id => @appointment.to_param, :appointment => { "these" => "params" }}
      end

      it "assigns the requested appointment as @appointment" do
        put :update, {:id => @appointment.to_param, :appointment => valid_attributes}
        expect(assigns(:appointment)).to eq(@appointment)
      end

      it "redirects to the appointment" do
        put :update, {:id => @appointment.to_param, :appointment => valid_attributes}
        expect(response).to redirect_to('/')
      end
    end

    describe "with invalid params" do
      it "assigns the appointment as @appointment" do
        # Trigger the behavior that occurs when invalid params are submitted
        Appointment.any_instance.stub(:save).and_return(false)
        put :update, {:id => @appointment.to_param, :appointment => {  }}
        expect(assigns(:appointment)).to eq(@appointment)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Appointment.any_instance.stub(:save).and_return(false)
        put :update, {:id => @appointment.to_param, :appointment => {  }}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested appointment" do
      expect {
        delete :destroy, {:id => @appointment.to_param}
      }.to change(Appointment, :count).by(-1)
    end

    it "redirects to the appointments list" do
      delete :destroy, {:id => @appointment.to_param}
      expect(response).to redirect_to(appointments_url)
    end
  end

end
